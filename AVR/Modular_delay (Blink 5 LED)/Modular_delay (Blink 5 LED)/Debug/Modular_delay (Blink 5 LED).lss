
Modular_delay (Blink 5 LED).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000700  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d5  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_int>:
 *  Author: HP
 */ 
#include <avr/io.h>
void timer0_int()
{
	TCCR0A|=(1<<WGM01);
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 bd       	out	0x24, r24	; 36
	OCR0A=249;
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;
  8a:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00);
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A);
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <delay>:
}

void delay(uint16_t ms)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24
	timer0_int();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <timer0_int>
	while(ms--)
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <delay+0x18>
	{
		while (!(TIFR0&(1<<OCF0A)))
  ac:	a9 9b       	sbis	0x15, 1	; 21
  ae:	fe cf       	rjmp	.-4      	; 0xac <delay+0xc>
		{
			
		}
		TIFR0|=(1<<OCF0A);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	85 bb       	out	0x15, r24	; 21
}

void delay(uint16_t ms)
{
	timer0_int();
	while(ms--)
  b6:	e9 01       	movw	r28, r18
  b8:	9e 01       	movw	r18, r28
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	31 09       	sbc	r19, r1
  be:	cd 2b       	or	r28, r29
  c0:	a9 f7       	brne	.-22     	; 0xac <delay+0xc>
		{
			
		}
		TIFR0|=(1<<OCF0A);
	}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <gpio_init>:
#include "gpio.h"

void gpio_init(void)
{
	
DDRB|=(1<<DDB1);
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	84 b9       	out	0x04, r24	; 4
DDRB|=(1<<DDB2);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	84 b9       	out	0x04, r24	; 4
DDRB|=(1<<DDB3);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	84 b9       	out	0x04, r24	; 4
DDRB|=(1<<DDB4);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	84 b9       	out	0x04, r24	; 4
DDRB|=(1<<DDB5);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
  e6:	08 95       	ret

000000e8 <main>:
#include "gpio.h"
#include <stdint.h>

int main(void)
{
	gpio_init();
  e8:	0e 94 64 00 	call	0xc8	; 0xc8 <gpio_init>
    /* Replace with your application code */
    while (1) 
    {
		PORTB^=(1<<PORTB1);
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	89 27       	eor	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB2);
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	89 27       	eor	r24, r25
  fa:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB3);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	88 e0       	ldi	r24, 0x08	; 8
 100:	89 27       	eor	r24, r25
 102:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB4);
 104:	95 b1       	in	r25, 0x05	; 5
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	89 27       	eor	r24, r25
 10a:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB5);
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	89 27       	eor	r24, r25
 112:	85 b9       	out	0x05, r24	; 5
		delay(2000);
 114:	80 ed       	ldi	r24, 0xD0	; 208
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	0e 94 50 00 	call	0xa0	; 0xa0 <delay>
 11c:	e7 cf       	rjmp	.-50     	; 0xec <main+0x4>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
