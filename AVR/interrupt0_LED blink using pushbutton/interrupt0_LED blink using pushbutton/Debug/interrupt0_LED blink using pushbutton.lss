
interrupt0_LED blink using pushbutton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(INT0_vect)   //Interrupt service routine for INT0
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	PORTB^=(1<<PORTB5); //Toggle PB5
  90:	95 b1       	in	r25, 0x05	; 5
  92:	80 e2       	ldi	r24, 0x20	; 32
  94:	89 27       	eor	r24, r25
  96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	83 e2       	ldi	r24, 0x23	; 35
  9c:	94 ef       	ldi	r25, 0xF4	; 244
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <__vector_1+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_1+0x28>
  a8:	00 00       	nop
	_delay_ms(5000);	
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:
int main(void)
{
	DDRD&=~(1<<DDD2);  //Making PD2 as input
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	8b 7f       	andi	r24, 0xFB	; 251
  be:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB5);   //Making PB5 as output
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<DDB4);   //PB4 as OUTPUT
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	84 b9       	out	0x04, r24	; 4
	PORTD|=(1<<PORTD2);  //Enable internal pull up to make PD2 normally high
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0);   //Enable INT0 at EIMSK Register
  d2:	8d b3       	in	r24, 0x1d	; 29
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8d bb       	out	0x1d, r24	; 29
 	EICRA|=(1<<ISC01);  //Enable Falling edge detection in EICRA Register
  d8:	e9 e6       	ldi	r30, 0x69	; 105
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	sei();   //Enable global Interrupt at SREG
  e2:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		PORTB^=(1<<PORTB4);
  e4:	95 b1       	in	r25, 0x05	; 5
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	89 27       	eor	r24, r25
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	87 ea       	ldi	r24, 0xA7	; 167
  f0:	91 e6       	ldi	r25, 0x61	; 97
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x38>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x42>
  fc:	00 00       	nop
  fe:	f2 cf       	rjmp	.-28     	; 0xe4 <main+0x2a>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
